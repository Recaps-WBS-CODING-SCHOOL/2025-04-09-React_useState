<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 800 600">
  <!-- Background -->
  <rect width="800" height="600" fill="#f8f9fa" rx="10" ry="10"/>
  
  <!-- Title -->
  <text x="400" y="40" font-family="Arial" font-size="24" text-anchor="middle" font-weight="bold" fill="#333">
    React useState Update Patterns
  </text>
  
  <!-- Section 1: When to Use Each Update Approach -->
  <rect x="50" y="70" width="700" height="200" fill="#e3f2fd" rx="8" ry="8" stroke="#90caf9" stroke-width="2"/>
  <text x="400" y="95" font-family="Arial" font-size="18" text-anchor="middle" font-weight="bold" fill="#1565c0">
    When to Use Each Update Approach
  </text>
  
  <!-- Direct Updates -->
  <rect x="80" y="115" width="300" height="130" fill="#bbdefb" rx="6" ry="6"/>
  <text x="230" y="135" font-family="Arial" font-size="16" text-anchor="middle" font-weight="bold" fill="#333">
    Direct Value Updates
  </text>
  <text x="230" y="160" font-family="Arial" font-size="14" text-anchor="middle" fill="#333">
    setValue(newValue)
  </text>
  <text x="95" y="185" font-family="Arial" font-size="14" fill="#333">
    ✓ When new value doesn't depend on previous
  </text>
  <text x="95" y="210" font-family="Arial" font-size="14" fill="#333">
    ✓ For independent updates (like form inputs)
  </text>
  <text x="95" y="235" font-family="Arial" font-size="14" fill="#333">
    ✗ When updates may happen rapidly
  </text>
  
  <!-- Functional Updates -->
  <rect x="420" y="115" width="300" height="130" fill="#c5e1a5" rx="6" ry="6"/>
  <text x="570" y="135" font-family="Arial" font-size="16" text-anchor="middle" font-weight="bold" fill="#333">
    Functional Updates
  </text>
  <text x="570" y="160" font-family="Arial" font-size="14" text-anchor="middle" fill="#333">
    setValue(prevValue => computeNewValue)
  </text>
  <text x="435" y="185" font-family="Arial" font-size="14" fill="#333">
    ✓ When new value depends on previous
  </text>
  <text x="435" y="210" font-family="Arial" font-size="14" fill="#333">
    ✓ For counters, toggles, increments
  </text>
  <text x="435" y="235" font-family="Arial" font-size="14" fill="#333">
    ✓ Multiple updates in same event handler
  </text>
  
  <!-- Arrow -->
  <path d="M 390 180 L 410 180" stroke="#666" stroke-width="2" fill="none"/>
  <polygon points="410,180 405,175 405,185" fill="#666"/>
  
  <!-- Section 2: Data Type Update Patterns -->
  <rect x="50" y="290" width="700" height="280" fill="#f3e5f5" rx="8" ry="8" stroke="#ce93d8" stroke-width="2"/>
  <text x="400" y="315" font-family="Arial" font-size="18" text-anchor="middle" font-weight="bold" fill="#6a1b9a">
    Data Type Update Patterns
  </text>
  
  <!-- Primitives -->
  <rect x="80" y="335" width="200" height="210" fill="#e1bee7" rx="6" ry="6"/>
  <text x="180" y="355" font-family="Arial" font-size="16" text-anchor="middle" font-weight="bold" fill="#333">
    Primitives
  </text>
  <text x="180" y="375" font-family="Arial" font-size="12" text-anchor="middle" font-style="italic" fill="#555">
    (string, number, boolean)
  </text>
  
  <!-- Primitives Code -->
  <rect x="95" y="390" width="170" height="80" fill="#f5f5f5" rx="4" ry="4"/>
  <text x="105" y="405" font-family="Courier New" font-size="11" fill="#333">// Direct update</text>
  <text x="105" y="420" font-family="Courier New" font-size="11" fill="#333">setValue(newValue);</text>
  <text x="105" y="440" font-family="Courier New" font-size="11" fill="#333">// Functional update</text>
  <text x="105" y="455" font-family="Courier New" font-size="11" fill="#333">setValue(prev => !prev);</text>
  
  <text x="95" y="490" font-family="Arial" font-size="12" fill="#333">
    ✓ Can be updated directly with
  </text>
  <text x="95" y="505" font-family="Arial" font-size="12" fill="#333">
    new values or calculations
  </text>
  <text x="95" y="525" font-family="Arial" font-size="12" fill="#333">
    ✓ No special handling needed
  </text>
  
  <!-- Objects -->
  <rect x="300" y="335" width="200" height="210" fill="#dcedc8" rx="6" ry="6"/>
  <text x="400" y="355" font-family="Arial" font-size="16" text-anchor="middle" font-weight="bold" fill="#333">
    Objects
  </text>
  <text x="400" y="375" font-family="Arial" font-size="12" text-anchor="middle" font-style="italic" fill="#555">
    (stats, config, userInfo)
  </text>
  
  <!-- Objects Code -->
  <rect x="315" y="390" width="170" height="100" fill="#f5f5f5" rx="4" ry="4"/>
  <text x="325" y="405" font-family="Courier New" font-size="11" fill="#333">// CORRECT ✓</text>
  <text x="325" y="420" font-family="Courier New" font-size="11" fill="#333">setObject(prev => ({</text>
  <text x="325" y="435" font-family="Courier New" font-size="11" fill="#333">  ...prev,</text>
  <text x="325" y="450" font-family="Courier New" font-size="11" fill="#333">  prop: newValue</text>
  <text x="325" y="465" font-family="Courier New" font-size="11" fill="#333">}));</text>
  <text x="325" y="485" font-family="Courier New" font-size="11" fill="#d32f2f">// WRONG ✗</text>
  <text x="325" y="500" font-family="Courier New" font-size="11" fill="#d32f2f">obj.prop = newValue;</text>
  
  <text x="315" y="525" font-family="Arial" font-size="12" fill="#333">
    ✓ Always create a new object
  </text>
  
  <!-- Arrays -->
  <rect x="520" y="335" width="200" height="210" fill="#bbdefb" rx="6" ry="6"/>
  <text x="620" y="355" font-family="Arial" font-size="16" text-anchor="middle" font-weight="bold" fill="#333">
    Arrays
  </text>
  <text x="620" y="375" font-family="Arial" font-size="12" text-anchor="middle" font-style="italic" fill="#555">
    (inventory, tasks, messages)
  </text>
  
  <!-- Arrays Code -->
  <rect x="535" y="390" width="170" height="110" fill="#f5f5f5" rx="4" ry="4"/>
  <text x="545" y="405" font-family="Courier New" font-size="11" fill="#333">// CORRECT ✓</text>
  <text x="545" y="420" font-family="Courier New" font-size="11" fill="#333">// Add item</text>
  <text x="545" y="435" font-family="Courier New" font-size="11" fill="#333">setArr(prev => [...prev, item]);</text>
  <text x="545" y="455" font-family="Courier New" font-size="11" fill="#333">// Filter</text>
  <text x="545" y="470" font-family="Courier New" font-size="11" fill="#333">setArr(prev => prev.filter(</text>
  <text x="545" y="485" font-family="Courier New" font-size="11" fill="#333">  item => item.id !== 3</text>
  <text x="545" y="500" font-family="Courier New" font-size="11" fill="#333">));</text>
  
  <text x="535" y="525" font-family="Arial" font-size="12" fill="#333">
    ✓ Use non-mutating methods 
  </text>
  <text x="535" y="540" font-family="Arial" font-size="12" fill="#333">
    (map, filter, concat, slice)
  </text>
  
  <!-- Footer Note -->
  <text x="400" y="580" font-family="Arial" font-size="14" text-anchor="middle" font-style="italic" fill="#555">
    Remember: React relies on detecting new references to trigger re-renders
  </text>
</svg>
